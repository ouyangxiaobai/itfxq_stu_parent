<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.itfxq.admin.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="SysUser">
    <!--查询列-->
      <id property="id" column="id"></id>
      <result property="username" column="username"></result>
      <result property="password" column="password"></result>
      <result property="email" column="email"></result>
      <result property="tel" column="tel"></result>
      <result property="sex" column="sex"></result>
      <result property="icon" column="icon"></result>
      <result property="stunum" column="stunum"></result>
      <result property="createTime" column="create_time"></result>
      <result property="type" column="type"></result>
      <result property="classes.id" column="cid"></result>
      <result property="classes.name" column="cname"></result>
      <result property="course.id" column="oid"></result>
      <result property="course.name" column="oname"></result>
    <result column="status" jdbcType="INTEGER" property="status" />
    <collection property="userRolesList" column="id" select="getUserRoleByUID" ofType="SysRole" >
    </collection>
  </resultMap>
  <sql id="Base_Column_List">
    id, username, `password`, icon, email, nick_name, note, create_time, login_time,
    `status`
  </sql>


  <sql id="menu_col_list">
      a.id AS id,
      a.parent_id AS parentId,
      a.parent_ids AS parentIds,
      a.name AS name,
      a.sort AS sort,
      a.type AS type,
      a.target AS target,
      a.icon AS icon,
      a.is_show AS hasShow,
      a.permission AS permission,
      a.create_by AS createBy,
      a.create_date AS createDate,
      a.update_by AS updateBy,
      a.update_date AS updateDate,
      a.remarks AS remarks,
      a.del_flag AS delFlag,
      a.tenant_id AS tenantId
  </sql>

  <select id="findByUserId" resultType="SysMenu">
    SELECT
    <include refid="menu_col_list"/>
    FROM sys_menu a
    JOIN sys_role_menu rm ON rm.menu_id = a.id
    JOIN sys_role r ON r.id = rm.role_id
    JOIN sys_user_role ur ON ur.role_id = r.id
    JOIN sys_user  u ON u.id = ur.user_id AND u.id = #{userId}
    WHERE a.del_flag = 0 AND r.del_flag = 0
    Group by a.id
    ORDER BY a.sort
  </select>
    <select id="selectByUsername" parameterType="java.lang.String" resultType="SysUser">
        select * from sys_user where username = #{username}
    </select>


    <sql id="whereSql">
        <where>
            <if test="username != null and username != ''">
                and u.username like concat('%',#{username},'%')
            </if>
            <if test="email != null and email != ''">
                and u.email like concat('%',#{email},'%')
            </if>
            <if test="type != null and type != ''">
                and u.type =#{type}
            </if>
        </where>
    </sql>

    <select id="queryAll"
            resultType="SysUser">
		select * from sys_user
	</select>

    <select id="queryTeachers"
            resultType="SysUser">
		select * from sys_user where type = 2
	</select>
    <select id="queryStudents"
            resultType="SysUser">
		select * from sys_user where type = 3
	</select>

    <select id="findTotal" parameterType="UserQuery" resultType="java.lang.Long" >
        select count(*)
        from sys_user u
        join t_classes c on u.classesid=c.id
        left join t_course o on u.courseid = o.id
        <include refid="whereSql"></include>
    </select>

    <select id="findData" parameterType="UserQuery" resultMap="BaseResultMap">
        select u.*,
        c.id cid,
        c.name cname,
        o.id oid,
        o.name oname
        from sys_user u
        join t_classes c on u.classesid=c.id
        left join t_course o on u.courseid = o.id
        <include refid="whereSql"></include>
        limit #{start},#{pageSize}
    </select>

    <select id="getUserRoleByUID" parameterType="java.lang.Long" resultType="SysRole">
        SELECT r.*
        from sys_user_role ur
        join sys_role r on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>

    <!--保存用户 -->
    <insert id="saveUser" parameterType="SysUser">
        insert into sys_user (username,password,icon,email,nick_name,note,create_time,status,tel,sex,type,stunum,classesid,address)
        values(#{username},#{password},#{icon},#{email},#{nickName},#{note},#{createTime},#{status},#{tel},#{sex},#{type},#{stunum},#{classesid},#{address})
    </insert>

    <!-- 修改用户-->
    <update id="updateUser" parameterType="SysUser">
        update sys_user
		set username=#{username},email=#{email},sex=#{sex},tel=#{tel},stunum=#{stunum},classesid=#{classesid}
		where id =#{id}
    </update>

    <!-- 删除用户-->
    <delete id="deleteUserById" parameterType="java.lang.Long">
        delete from sys_user where id=#{id}
    </delete>

    <!--saveUserRole 保存用户角色-->
    <insert id="saveUserRole" parameterType="java.util.List">
        insert into sys_user_role(user_id,role_id) values
        <foreach collection="list" item="item" separator=",">
            (#{item.userId},#{item.roleId})
        </foreach>
    </insert>

    <!-- 删除用户角色 根据用户id-->
    <delete id="deleteUserRoleByUserId" parameterType="java.lang.Long">
        delete from sys_user_role where user_id = #{userId}
    </delete>

</mapper>
